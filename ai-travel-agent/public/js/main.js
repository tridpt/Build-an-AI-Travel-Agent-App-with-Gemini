// Tab switching
const tabButtons = document.querySelectorAll('.tab-button');
const tabContents = document.querySelectorAll('.tab-content');

tabButtons.forEach(button => {
    button.addEventListener('click', () => {
        const tabName = button.dataset.tab;
        
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        
        button.classList.add('active');
        document.getElementById(`${tabName}Tab`).classList.add('active');
    });
});

// Budget display formatting
const budgetInput = document.getElementById('budget');
const budgetDisplay = document.getElementById('budgetDisplay');

budgetInput.addEventListener('input', (e) => {
    const value = parseInt(e.target.value) || 0;
    budgetDisplay.textContent = value.toLocaleString('vi-VN') + ' VNƒê';
});

// Set min date to today
const today = new Date().toISOString().split('T')[0];
document.getElementById('startDate').setAttribute('min', today);
document.getElementById('endDate').setAttribute('min', today);

// Update end date min when start date changes
document.getElementById('startDate').addEventListener('change', (e) => {
    document.getElementById('endDate').setAttribute('min', e.target.value);
});

// Generate Travel Plan
const generateButton = document.getElementById('generatePlanButton');
const planResult = document.getElementById('planResult');
const planContent = document.getElementById('planContent');
const editButton = document.getElementById('editPlanButton');

generateButton.addEventListener('click', async () => {
    const formData = {
        destination: document.getElementById('destination').value.trim(),
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
        budget: parseInt(document.getElementById('budget').value) || 0,
        travelers: parseInt(document.getElementById('travelers').value) || 1,
        travelStyle: document.getElementById('travelStyle').value,
        transportation: document.getElementById('transportation').value,
        additionalInfo: document.getElementById('additionalInfo').value.trim()
    };
    
    // Get selected interests
    const interests = Array.from(document.querySelectorAll('.checkbox-group input:checked'))
        .map(cb => cb.value);
    
    // Validation
    if (!formData.startDate || !formData.endDate) {
        alert('Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c!');
        return;
    }
    
    if (formData.budget <= 0) {
        alert('Vui l√≤ng nh·∫≠p ng√¢n s√°ch!');
        return;
    }
    
    if (!formData.travelStyle) {
        alert('Vui l√≤ng ch·ªçn phong c√°ch du l·ªãch!');
        return;
    }
    
    // Calculate days
    const start = new Date(formData.startDate);
    const end = new Date(formData.endDate);
    const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
    
    if (days <= 0) {
        alert('Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu!');
        return;
    }
    
    // Build prompt for AI
    const prompt = buildTravelPrompt(formData, interests, days);
    
    // Call AI
    generateButton.disabled = true;
    generateButton.textContent = '‚è≥ ƒêang t·∫°o l·ªãch tr√¨nh...';
    
    try {
        const response = await fetch('http://localhost:3000/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: prompt })
        });
        
        const data = await response.json();
        
        if (data.response) {
            planContent.innerHTML = markdownToHtml(data.response);
            planResult.style.display = 'block';
            planResult.scrollIntoView({ behavior: 'smooth' });
        } else {
            alert('Kh√¥ng th·ªÉ t·∫°o l·ªãch tr√¨nh. Vui l√≤ng th·ª≠ l·∫°i!');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('L·ªói k·∫øt n·ªëi ƒë·∫øn server!');
    } finally {
        generateButton.disabled = false;
        generateButton.textContent = '‚ú® T·∫°o L·ªãch Tr√¨nh Du L·ªãch';
    }
});

// Edit plan button
editButton.addEventListener('click', () => {
    planResult.style.display = 'none';
    window.scrollTo({ top: 0, behavior: 'smooth' });
});

// Build prompt for AI
function buildTravelPrompt(formData, interests, days) {
    let prompt = `B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n du l·ªãch chuy√™n nghi·ªáp. H√£y t·∫°o m·ªôt l·ªãch tr√¨nh du l·ªãch CHI TI·∫æT v√† C·ª§ TH·ªÇ v·ªõi c√°c th√¥ng tin sau:\n\n`;
    
    prompt += `üìä TH√îNG TIN CHUY·∫æN ƒêI:\n`;
    prompt += `- ƒêi·ªÉm ƒë·∫øn: ${formData.destination || 'Ch∆∞a x√°c ƒë·ªãnh (h√£y g·ª£i √Ω ƒëi·ªÉm ƒë·∫øn ph√π h·ª£p)'}\n`;
    prompt += `- Th·ªùi gian: ${days} ng√†y (t·ª´ ${formData.startDate} ƒë·∫øn ${formData.endDate})\n`;
    prompt += `- Ng√¢n s√°ch: ${formData.budget.toLocaleString('vi-VN')} VNƒê cho ${formData.travelers} ng∆∞·ªùi\n`;
    prompt += `- S·ªë ng∆∞·ªùi ƒëi: ${formData.travelers} ng∆∞·ªùi\n`;
    prompt += `- Phong c√°ch du l·ªãch: ${formData.travelStyle}\n`;
    
    if (formData.transportation) {
        prompt += `- Ph∆∞∆°ng ti·ªán di chuy·ªÉn: ${formData.transportation}\n`;
    }
    
    if (interests.length > 0) {
        prompt += `- S·ªü th√≠ch: ${interests.join(', ')}\n`;
    }
    
    if (formData.additionalInfo) {
        prompt += `- Y√™u c·∫ßu kh√°c: ${formData.additionalInfo}\n`;
    }
    
    prompt += `\nüìù Y√äU C·∫¶U:\n`;
    prompt += `1. T·∫°o l·ªãch tr√¨nh CHI TI·∫æT theo T·ª™NG NG√ÄY\n`;
    prompt += `2. G·ª£i √Ω ƒë·ªãa ƒëi·ªÉm tham quan C·ª§ TH·ªÇ v·ªõi GI·ªú GI·ªú\n`;
    prompt += `3. G·ª£i √Ω nh√† h√†ng/qu√°n ƒÉn v·ªõi GI√Å C·∫¢ ∆Ø·ªöC T√çNH\n`;
    prompt += `4. G·ª£i √Ω kh√°ch s·∫°n/n∆°i l∆∞u tr√∫ ph√π h·ª£p v·ªõi ng√¢n s√°ch\n`;
    prompt += `5. ∆Ø·ªõc t√≠nh CHI PH√ç CHI TI·∫æT cho t·ª´ng h·∫°ng m·ª•c:\n`;
    prompt += `   - Ph∆∞∆°ng ti·ªán di chuy·ªÉn\n`;
    prompt += `   - L∆∞u tr√∫\n`;
    prompt += `   - ƒÇn u·ªëng\n`;
    prompt += `   - V√© tham quan\n`;
    prompt += `   - Chi ph√≠ kh√°c\n`;
    prompt += `6. ƒê∆∞a ra T·ªîNG CHI PH√ç D·ª∞ KI·∫æN v√† so s√°nh v·ªõi ng√¢n s√°ch\n`;
    prompt += `7. G·ª£i √Ω TIPS h·ªØu √≠ch ƒë·ªÉ ti·∫øt ki·ªám chi ph√≠\n`;
    prompt += `8. Th√™m th√¥ng tin v·ªÅ th·ªùi ti·∫øt, trang ph·ª•c ph√π h·ª£p\n\n`;
    
    prompt += `H√£y tr·∫£ l·ªùi b·∫±ng TI·∫æNG VI·ªÜT v·ªõi format ƒë·∫πp, d·ªÖ ƒë·ªçc. S·ª≠ d·ª•ng emoji v√† markdown ƒë·ªÉ l√†m n·ªïi b·∫≠t c√°c ph·∫ßn quan tr·ªçng.`;
    
    return prompt;
}

// Markdown to HTML (same as before)
function markdownToHtml(text) {
    text = text.replace(/^### (.*$)/gim, '<h3>$1</h3>');
    text = text.replace(/^## (.*$)/gim, '<h2>$1</h2>');
    text = text.replace(/^# (.*$)/gim, '<h1>$1</h1>');
    text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
    text = text.replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>');
    text = text.replace(/`(.*?)`/g, '<code>$1</code>');
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');
    text = text.replace(/^\* (.*$)/gim, '<li>$1</li>');
    text = text.replace(/^- (.*$)/gim, '<li>$1</li>');
    text = text.replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>');
    text = text.replace(/^\d+\.\s+(.*$)/gim, '<li>$1</li>');
    text = text.replace(/^---$/gim, '<hr>');
    text = text.replace(/\n\n/g, '</p><p>');
    text = text.replace(/\n/g, '<br>');
    return '<p>' + text + '</p>';
}

// ===== CHAT TAB (Existing functionality) =====
const chatMessages = document.getElementById('chatMessages');
const userInput = document.getElementById('userInput');
const sendButton = document.getElementById('sendButton');

function addMessage(message, isUser) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message');
    messageDiv.classList.add(isUser ? 'user-message' : 'bot-message');
    
    if (isUser) {
        messageDiv.textContent = message;
    } else {
        messageDiv.innerHTML = markdownToHtml(message);
    }
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function showLoading() {
    const loadingDiv = document.createElement('div');
    loadingDiv.classList.add('message', 'bot-message', 'loading');
    loadingDiv.innerHTML = '<div class="typing-indicator"><span></span><span></span><span></span></div>';
    loadingDiv.id = 'loading';
    chatMessages.appendChild(loadingDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function removeLoading() {
    const loading = document.getElementById('loading');
    if (loading) {
        loading.remove();
    }
}

async function sendMessage() {
    const message = userInput.value.trim();
    
    if (!message) return;
    
    addMessage(message, true);
    userInput.value = '';
    sendButton.disabled = true;
    showLoading();
    
    try {
        const response = await fetch('http://localhost:3000/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message })
        });
        
        const data = await response.json();
        
        removeLoading();
        
        if (data.response) {
            addMessage(data.response, false);
        } else {
            addMessage('Sorry, I couldn\'t process your request.', false);
        }
    } catch (error) {
        removeLoading();
        addMessage('Error: Unable to connect to the server.', false);
        console.error('Error:', error);
    } finally {
        sendButton.disabled = false;
        userInput.focus();
    }
}

sendButton.addEventListener('click', sendMessage);

userInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
    }
});

// Welcome message in chat
addMessage('Xin ch√†o! T√¥i l√† tr·ª£ l√Ω du l·ªãch AI. H√£y h·ªèi t√¥i v·ªÅ c√°c ƒëi·ªÉm ƒë·∫øn, kh√°ch s·∫°n, ho·∫°t ƒë·ªông ho·∫∑c l·ªùi khuy√™n du l·ªãch!', false);